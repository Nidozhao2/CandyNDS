/* code_tests_1.txt  :  trozos de código para testear algunas tareas de la
						fase 1 de la práctica CandyNDS (fase 1) */


/* ---------------------------------------------------------------- */
/* candy1_main.c : función principal main() para test de tarea 1A 	*/
/*					(requiere tener implementada la tarea 1E)		*/
/* ---------------------------------------------------------------- */
int main(void)
{
	unsigned char level = 0;		// nivel del juego (nivel inicial = 0)
	
	seed32 = time(NULL);		// fija semilla de números aleatorios
	consoleDemoInit();			// inicialización de pantalla de texto
	printf("candyNDS (prueba tarea 1A)\n");
	printf("\x1b[38m\x1b[1;0H  nivel: %d", level);

	do							// bucle principal de pruebas
	{
		inicializa_matriz(matrix, level);
		escribe_matriz_testing(matrix);
		retardo(3);
		printf("\x1b[39m\x1b[3;8H (pulse A o B)");
		do
		{	swiWaitForVBlank();
			scanKeys();					// esperar pulsación tecla 'A' o 'B'
		} while (!(keysHeld() & (KEY_A | KEY_B)));
		printf("\x1b[3;8H              ");
		retardo(3);
		if (keysHeld() & KEY_A)			// si pulsa 'A',
		{								// pasa a siguiente nivel
			level = (level + 1) % MAXLEVEL;
			printf("\x1b[38m\x1b[1;8H %d", level);
		}
	} while (1);
	return(0);
}



/* ---------------------------------------------------------------- */
/* candy1_main.c : función principal main() para test de tarea 1C 	*/
/*					(requiere tener implementada la tarea 1E)		*/
/* ---------------------------------------------------------------- */
int main(void)
{
	unsigned char level = 0;		// nivel del juego (nivel inicial = 0)
	
	consoleDemoInit();			// inicialización de pantalla de texto
	printf("candyNDS (prueba tarea 1C)\n");
	printf("\x1b[38m\x1b[1;0H  nivel: %d", level);

	do							// bucle principal de pruebas
	{
		copia_matriz(matrix, mapas[level]);	// sustituye a inicializa_matriz()
		escribe_matriz_testing(matrix);
		if (hay_secuencia(matrix))			// si hay secuencias
			printf("\x1b[39m\x1b[3;0H hay secuencia: SI");
		else
			printf("\x1b[39m\x1b[3;0H hay secuencia: NO");
		retardo(3);
		printf("\x1b[39m\x1b[3;19H (pulse A/B)");
		do
		{	swiWaitForVBlank();
			scanKeys();					// esperar pulsación tecla 'A' o 'B'
		} while (!(keysHeld() & (KEY_A | KEY_B)));
		printf("\x1b[3;0H                               ");
		retardo(3);
		if (keysHeld() & KEY_A)			// si pulsa 'A',
		{								// pasa a siguiente nivel
			level = (level + 1) % MAXLEVEL;
			printf("\x1b[38m\x1b[1;8H %d", level);
		}
	} while (1);
	return(0);
}




/* ---------------------------------------------------------------- */
/* candy1_main.c : función principal main() para test de tarea 1E 	*/
/* ---------------------------------------------------------------- */
#define NUMTESTS 14
short nmap[] = {4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 8};
short posX[] = {0, 0, 0, 0, 4, 4, 4, 0, 0, 5, 4, 1, 1, 1};
short posY[] = {2, 2, 2, 2, 4, 4, 4, 0, 0, 0, 4, 3, 3, 5};
short cori[] = {0, 1, 2, 3, 0, 1, 2, 0, 3, 0, 0, 1, 3, 0};
short resp[] = {1, 2, 1, 1, 2, 1, 1, 3, 1, 3, 5, 2, 4, 2};

int main(void)
{
	unsigned char level;			// nivel del juego
	unsigned char ntest = 0;		// número de test
	unsigned char result;			// resultado de cuenta_repeticiones()

	consoleDemoInit();			// inicialización de pantalla de texto
	printf("candyNDS (prueba tarea 1E)\n");
	level = nmap[0];
	printf("\x1b[38m\x1b[1;0H  nivel: %d", level);
	copia_matriz(matrix, mapas[level]);
	escribe_matriz_testing(matrix);
	do							// bucle principal de pruebas
	{
		printf("\x1b[39m\x1b[2;0H test %d: posXY (%d, %d), c.ori %d",
									ntest, posX[ntest], posY[ntest], cori[ntest]);
		printf("\x1b[39m\x1b[3;0H resultado esperado: %d", resp[ntest]);
		
		result = cuenta_repeticiones(matrix, posY[ntest], posX[ntest], cori[ntest]);
		
		printf("\x1b[39m\x1b[4;0H resultado obtenido: %d", result);
		retardo(3);
		printf("\x1b[38m\x1b[5;19H (pulse A/B)");
		do
		{	swiWaitForVBlank();
			scanKeys();					// esperar pulsación tecla 'A' o 'B'
		} while (!(keysHeld() & (KEY_A | KEY_B)));
		printf("\x1b[2;0H                               ");
		printf("\x1b[3;0H                               ");
		printf("\x1b[4;0H                               ");
		printf("\x1b[38m\x1b[5;19H            ");
		retardo(3);
		if (keysHeld() & KEY_A)		// si pulsa 'A',
		{
			ntest++;				// siguiente test
			if ((ntest < NUMTESTS) && (nmap[ntest] != level))
			{				// si número de mapa del siguiente test diferente
				level = nmap[ntest];		// del número de mapa actual,
				printf("\x1b[38m\x1b[1;8H %d", level); // cambiar el mapa actual
				copia_matriz(matrix, mapas[level]);
				escribe_matriz_testing(matrix);
			}
		}
	} while (ntest < NUMTESTS);		// bucle de pruebas
	printf("\x1b[38m\x1b[5;19H (fin tests)");
	do { swiWaitForVBlank(); } while(1);	// bucle infinito
	return(0);
}


/* ---------------------------------------------------------------- */
/* candy1_main.c : función principal main() para test de tarea 1G 	*/
/*					(requiere tener implementada la tarea 1E)		*/
/* ---------------------------------------------------------------- */
int main(void)
{
	unsigned char level = 0;		// nivel del juego (nivel inicial = 0)
	
	consoleDemoInit();			// inicialización de pantalla de texto
	printf("candyNDS (prueba tarea 1G)\n");
	printf("\x1b[38m\x1b[1;0H  nivel: %d", level);

	do							// bucle principal de pruebas
	{
		copia_matriz(matrix, mapas[level]);	// sustituye a inicializa_matriz()
		escribe_matriz_testing(matrix);
		if (hay_combinacion(matrix))			// si hay combinaciones
			printf("\x1b[39m\x1b[3;0Hhay combinacion: SI");
		else
			printf("\x1b[39m\x1b[3;0Hhay combinacion: NO");
		retardo(3);
		printf("\x1b[39m\x1b[3;19H (pulse A/B)");
		do
		{	swiWaitForVBlank();
			scanKeys();					// esperar pulsación tecla 'A' o 'B'
		} while (!(keysHeld() & (KEY_A | KEY_B)));
		printf("\x1b[3;0H                               ");
		retardo(3);
		if (keysHeld() & KEY_A)			// si pulsa 'A',
		{								// pasa a siguiente nivel
			level = (level + 1) % MAXLEVEL;
			printf("\x1b[38m\x1b[1;8H %d", level);
		}
	} while (1);
	return(0);
}

/* ---------------------------------------------------------------- */
/* candy1_main.c : función principal main() para test de tarea 1D   */
/*                     (elimina_secuencias)                         */
/* ---------------------------------------------------------------- */

int main(void)
{
    unsigned char level = 0;    // nivel inicial
	unsigned int lvl = 0;
	seed32 = time(NULL);

    consoleDemoInit();          // inicialización de pantalla de texto
    printf("candyNDS (prueba elimina_secuencias)\n");
    printf("\x1b[38m\x1b[1;0H  nivel: %d", level);
	
	inicializa_matriz(matrix, level);
	escribe_matriz_testing(matrix);
	retardo(10);
	elimina_secuencias(matrix, mat_mar);
	escribe_matriz_testing(matrix);
    do
    {

         

        retardo(2);
        printf("\x1b[39m\x1b[5;19H (pulse A/B)");

        // esperar pulsación
        do {
            swiWaitForVBlank();
            scanKeys();
        } while (!(keysHeld() & (KEY_A | KEY_B)));

        printf("\x1b[2;0H                               ");
        printf("\x1b[3;0H                               ");
        printf("\x1b[4;0H                               ");
        printf("\x1b[5;19H                               ");
        retardo(3);

		if (keysHeld() & KEY_B)   // pasar al siguiente nivel
        {
			if (lvl % 2 == 0){
            printf("\x1b[39m\x1b[3;0H matriz de marcas:\n");
        	escribe_matriz_testing(mat_mar);   // mostrar las marcas con identificadores

       		}
			else{
				escribe_matriz_testing(matrix);
			}
			lvl ++;
		}


        if (keysHeld() & KEY_A)   // pasar al siguiente nivel
        {
			
            level = (level + 1) % MAXLEVEL;
			inicializa_matriz(matrix, level);
			escribe_matriz_testing(matrix);
			retardo(10);
			elimina_secuencias(matrix, mat_mar);
			escribe_matriz_testing(matrix);
            printf("\x1b[38m\x1b[1;8H %d", level);
        }

    } while (1);

    return 0;
}


/* ---------------------------------------------------------------- */
/* candy1_main.c : función principal main() para test de tarea 1B 	*/
/* ---------------------------------------------------------------- */
int main(void)
{
	unsigned char level = 0;		// nivel del juego (nivel inicial = 0)
	
	seed32 = time(NULL);		// fija semilla de números aleatorios
	consoleDemoInit();			// inicialización de pantalla de texto
	printf("candyNDS (prueba tarea 1A)\n");
	printf("\x1b[38m\x1b[1;0H  nivel: %d", level);
	inicializa_matriz(matrix, level);
	escribe_matriz_testing(matrix);
	recombina_elementos(matrix);

	do							// bucle principal de pruebas
	{
		escribe_matriz_testing(matrix);

		retardo(3);
		printf("\x1b[39m\x1b[3;8H (pulse A o B)");
		do
		{	swiWaitForVBlank();
			scanKeys();					// esperar pulsación tecla 'A' o 'B'
		} while (!(keysHeld() & (KEY_A | KEY_B)));
		printf("\x1b[3;8H              ");
		retardo(3);
		if (keysHeld() & KEY_A)			// si pulsa 'A',
		{								// pasa a siguiente nivel
			level = (level + 1) % MAXLEVEL;
			inicializa_matriz(matrix, level);
			printf("\x1b[38m\x1b[1;8H %d", level);
		}
		if(keysHeld() & KEY_B){
			recombina_elementos(matrix);
		}


	} while (1);
	return(0);
}

/* ---------------------------------------------------------------- */
/* candy1_main.c : función principal main() para test de tarea 1H   */
/*                     (sugiere_combinacion)                        */
/* ---------------------------------------------------------------- */

int main(void)
{
    unsigned char level = 0;    // nivel inicial
	unsigned char vector[6] = {0,0,0,0,0,0};
	seed32 = time(NULL);

    consoleDemoInit();          // inicialización de pantalla de texto
    printf("candyNDS (prueba elimina_secuencias)\n");
    printf("\x1b[38m\x1b[1;0H  nivel: %d", level);
	
	inicializa_matriz(matrix, level);
	escribe_matriz_testing(matrix);

    do
    {

         

        retardo(10);
        printf("\x1b[39m\x1b[2;2H %d, %d, %d, %d, %d, %d", vector[0], vector[1], vector[2], vector[3], vector[4], vector[5]);
		escribe_matriz_testing(matrix);

        // esperar pulsación
        do {
            swiWaitForVBlank();
            scanKeys();
        } while (!(keysHeld() & (KEY_A | KEY_B)));

        printf("\x1b[2;0H                               ");
        printf("\x1b[3;0H                               ");
        printf("\x1b[4;0H                               ");
        printf("\x1b[5;19H                               ");
        retardo(3);



        if (keysHeld() & KEY_A)   // pasar al siguiente nivel
        {
			
            level = (level + 1) % MAXLEVEL;
			inicializa_matriz(matrix, level);
			escribe_matriz_testing(matrix);
			
            printf("\x1b[38m\x1b[1;8H %d", level);
        }
		if (keysHeld() & KEY_B){
			elimina_secuencias(matrix, mat_mar);
			if (hay_combinacion(matrix)){
				sugiere_combinacion(matrix, vector);
			}
			else{
				printf("\x1b[39m\x1b[2;2H no hay secuencia");
				recombina_elementos(matrix);
			}
			
			escribe_matriz_testing(matrix);

		}

    } while (1);

    return 0;
}


/* ---------------------------------------------------------------- */
/* candy1_main.c : función principal main() para test de tarea 1F   */
/*                     (sugiere_combinacion)                        */
/* ---------------------------------------------------------------- */

int main(void)
{
    unsigned char level = 0;    // nivel inicial
	char movimiento = 0;
	seed32 = time(NULL);

    consoleDemoInit();          // inicialización de pantalla de texto
    printf("candyNDS (prueba baja_elementos)\n");
    printf("\x1b[38m\x1b[1;0H  nivel: %d", level);
	
	inicializa_matriz(matrix, level);
	escribe_matriz_testing(matrix);
	elimina_secuencias(matrix, mat_mar);
	retardo(20);
	escribe_matriz_testing(matrix);
	do {
		movimiento = baja_elementos(matrix);
	} while (movimiento);
	retardo(20);
	escribe_matriz_testing(matrix);
    do
    {

        retardo(2);

        // esperar pulsación
        do {
            swiWaitForVBlank();
            scanKeys();
        } while (!(keysHeld() & (KEY_A | KEY_B)));

        printf("\x1b[2;0H                               ");
        printf("\x1b[3;0H                               ");
        printf("\x1b[4;0H                               ");
        printf("\x1b[5;19H                               ");
        retardo(3);

        if (keysHeld() & KEY_A)   // pasar al siguiente nivel
        {
			
            level = (level + 1) % MAXLEVEL;
			inicializa_matriz(matrix, level);
			escribe_matriz_testing(matrix);
            printf("\x1b[38m\x1b[1;8H %d", level);
        } else if (keysHeld() & KEY_B) {
			elimina_secuencias(matrix, mat_mar);
			escribe_matriz_testing(matrix);
			retardo(15);
			do {
				movimiento = baja_elementos(matrix);
			} while (movimiento);
			escribe_matriz_testing(matrix);
		}

    } while (1);

    return 0;
}

